/// \file silo_dbl2flt.cc
/// \author Jonathan Mackey
/// 
/// This file reads in silo files generated by serial and parallel code
/// and, if the input files are double precision, it replaces them with
/// floating point to save disk space.
///
/// Mods:
/// - 2015.06.18 JM: started to program it.

#ifndef PARALLEL
# error "define PARALLEL so this will work!"
#endif

#include <list>
#include <iostream>
#include <sstream>
#include <silo.h>
#include <cmath>
using namespace std;

#include "defines/functionality_flags.h"
#include "defines/testing_flags.h"

#include "tools/reporting.h"
#include "constants.h"

#include "global.h"
#include "dataIO/dataio.h"
#include "dataIO/dataio_silo.h"
#include "dataIO/dataio_silo_utility.h"
#include "grid/uniform_grid.h"

#include "MCMD_control.h"
#include "setup_fixed_grid_MPI.h"


// ##################################################################
// ##################################################################




int main(int argc, char **argv)
{

  //
  // First initialise MPI, even though this is a single processor
  // piece of code.
  //
  int err = COMM->init(&argc, &argv);
  //
  // Also initialise the MCMD class with myrank and nproc.
  //
  class MCMDcontrol MCMD;
  int r=-1, np=-1;
  COMM->get_rank_nproc(&r,&np);
  MCMD.set_myrank(r);
  MCMD.set_nproc(np);

  //
  // Get an input file and an output file.
  //
  if (argc!=5) {
    cerr << "Error: must call as follows...\n";
    cerr << "silo_dbl2flt: <silo_dbl2flt> <first-dir> <first-file> <comp-dir> <comp-file> \n";
    rep.error("Bad number of args",argc);
  }
  string fdir = argv[1];
  string firstfile  = argv[2];
  string sdir = argv[3];
  string secondfile = argv[4];
  cout <<"fdir="<<fdir<<"\tsdir="<<sdir<<"\n";
  cout <<"first file: "<<firstfile;
  cout <<"\tsecond file: "<<secondfile<<"\n";

  //
  // set up dataio_utility classes, one to read double data, and the
  // other to write float data.
  //
  class dataio_silo_utility read("DOUBLE",&MCMD);
  class dataio_silo_pllel write("FLOAT",&MCMD);

  // ----------------------------------------------------------------
  // ----------------------------------------------------------------

  //
  // Get list of files to read:
  //
  list<string> ffiles;
  err += dataio.get_files_in_dir(fdir, firstfile,  &ffiles);
  if (err) rep.error("failed to get first list of files",err);

  for (list<string>::iterator s=ffiles.begin(); s!=ffiles.end(); s++) {
    // If file is not a .silo file, then remove it from the list.
    if ((*s).find(".silo")==string::npos) {
      cout <<"removing file "<<*s<<" from list.\n";
      ffiles.erase(s);
    }
    else {
      cout <<"files: "<<*s<<endl;
    }
  }

  //
  // Set up iterators to run through all the files.
  //
  list<string>::iterator ff=ffiles.begin();

  //
  // Set the number of files to be the length of the shortest list.
  //
  unsigned int nfiles = ffiles.size();
  if (nfiles<1) rep.error("Need at least one file, but got none",nfiles);
  
  // ----------------------------------------------------------------
  // ----------------------------------------------------------------

  //
  // Read the first file, and setup the grid based on its parameters.
  //
  ostringstream oo;
  oo.str(""); oo<<fdir<<"/"<<*ff; firstfile =oo.str();
  err = dataio.ReadHeader(firstfile);
  if (err) rep.error("Didn't read header",err);

  //
  // get a setup_grid class, and use it to set up the grid!
  // TODO: minimal cells!!!
  class setup_fixed_grid *SimSetup =0;
  SimSetup = new setup_fixed_grid_pllel();
  class GridBaseClass *grid = 0;
  err  = MCMD.decomposeDomain();
  if (err) rep.error("main: failed to decompose domain!",err);
  //
  // Now we have read in parameters from the file, so set up a grid.
  //
  SimSetup->setup_grid(&grid,&MCMD);
  if (!grid) rep.error("Grid setup failed",grid);

  // ----------------------------------------------------------------
  // ----------------------------------------------------------------

  //
  // loop over all files: open first+second and write the difference.
  //
  for (unsigned int fff=0; fff<nfiles; fff++) {
    
    oo.str(""); oo<<fdir<<"/"<<*ff; firstfile  =oo.str(); 
    cout <<"\n****************************************************\n";
    cout <<"fff="<<fff<<"\tfirst file: "<<firstfile;

    class file_status fstat;
    if (!fstat.file_exists(firstfile)) {
       cout <<"first file: "<<firstfile;
       rep.error("First or second file doesn't exist",firstfile);
    }
    
    // ----------------------------------------------------------------
    // ----------------------------------------------------------------

    //
    // Read in first code header so i know how to setup grid.
    //
    err = dataio.ReadHeader(firstfile);
    if (err) rep.error("Didn't read header",err);
  
    // ----------------------------------------------------------------
    // ----------------------------------------------------------------

    //
    // Read data (this reader can read serial or parallel data).
    //
    err = dataio.parallel_read_any_data(firstfile, grid);
    rep.errorTest("(silo_dbl2flt) Failed to read firstfile",0,err);

    // ----------------------------------------------------------------
    // ----------------------------------------------------------------
    cout <<"FINISHED reading first file: "<<firstfile<<endl;

    // *********************************************************************
    // ********* FINISHED READING FILE, NOW WRITE REPLACEMENT *********
    // *********************************************************************
    firstio.OutputData(outfile, grid, fff);

    //
    // move onto next first and second files
    //
    ff++;
  } // move onto next file

  //
  // Finish up and quit.
  //
  if (grid) {delete grid; grid=0;}
  COMM->finalise();
  delete COMM; COMM=0;
  //MPI_Finalize();
  return 0;
}



