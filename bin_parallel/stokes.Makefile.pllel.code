# Makefile for my Grid Hydro/MHD Code, Jonathan Mackey
#
# - 2009.12.18 JM: updated epona libs.
# - 2009.02.03 JM: updated stokes debug compile flags.
# - 2010-09-22 JM: Added Riemann_FVS_hydro files.
#
SHELL = /bin/sh
.SUFFIXES:
.SUFFIXES: .cc .o
srcdir = .

# --------------------
# Compile-time options
# --------------------
# Tell it that we're compiling parallel version of code
OPTION = -DPARALLEL
# Tell it to use MPI or FILE_COMMS for the inter-process communication.
#IOMODE=USE_FILE_COMMS
IOMODE=USE_MPI
OPTION += -D$(IOMODE)
# if using Silo
OPTION += -DSILO
# if using Fits
OPTION += -DFITS

#MAKE_UNAME=epona
#MAKE_UNAME=aurora
#MAKE_UNAME=walton
MAKE_UNAME=stokes
#MAKE_UNAME=bgl

# All machines and options need readline and maths
LDFLAGS = -lreadline
# display all warnings
CXXFLAGS = -Wall

###########################################
# Specific Options for epona (ubuntu 9.10 32 bit)
###########################################
ifeq ($(MAKE_UNAME), epona)
ifeq ($(IOMODE), USE_FILE_COMMS)
CXX = g++
endif
ifeq ($(IOMODE), USE_MPI)
CXX = mpicxx
endif
CXXFLAGS = -O3
#CXXFLAGS = -O0 -Wall -g

MYLIB = /mnt/local/jm/local_libs

# Includes for HDF5
INC = -I/usr/include  #-fomit-frame-pointer
# for Silo, which can use HDF5.
INC += -I$(MYLIB)/silo_gcc_hdf5/include
INC += -I$(MYLIB)/cfitsio_gcc/include
# Libraries for fits, silo (with hdf5)
# Note they don't make the executable bigger if SILO is undefined.
LDFLAGS += -L$(MYLIB)/cfitsio_gcc/lib/ -lcfitsio
LDFLAGS += -L$(MYLIB)/silo_gcc_hdf5/lib/ -lsiloh5
LDFLAGS += -L/usr/lib/ -lhdf5 -lhdf5_cpp
LDFLAGS += -lz -lpthread -lm
endif

#############################################
# Specific Options for Walton - ICHEC cluster
#############################################
ifeq ($(MAKE_UNAME), walton)
CXX = mpiCC
CXXFLAGS += -O3
MYLIB = /ichec/work/dsast002b/jm_code/extra_libs
#MYLIB = /ichec/home/users/jmackey/mylibs

############ GCC COMPILERS
#INC = -I$(MYLIB)/cfitsio/include
#INC+= -I$(MYLIB)/silo/include
#INC+= -I$(MYLIB)/hdf5/include -fomit-frame-pointer
#LDFLAGS += $(MYLIB)/cfitsio/lib/libcfitsio.a
#LDFLAGS += $(MYLIB)/silo/lib/libsiloh5.a
#LDFLAGS += $(MYLIB)/hdf5/lib/libhdf5.a
#LDFLAGS += $(MYLIB)/hdf5/lib/libhdf5_cpp.a
#LDFLAGS += -lz -lpthread
############ PATHSCALE COMPILERS
INC  = -I/opt/packages/path-compat/cfitsio/include
INC += -I$(MYLIB)/silo_path_nohdf/include
LDFLAGS += -lcfitsio
LDFLAGS += -L$(MYLIB)/silo_path_nohdf/lib/ -lsilo
LDFLAGS += -L/opt/packages/gcc-compat/acml/gnu64/lib/ -lacml
endif

#############################################
# Specific Options for STOKES - ICHEC cluster
# Intel Compilers!
#############################################
# module load mvapich2-intel intel-cc intel-mkl valgrind ddt
# module load mvapich2-gnu
#############################################
ifeq ($(MAKE_UNAME), stokes)
CXX = mpicxx
CXXFLAGS = -O3 # optimised code
#CXXFLAGS = -O0 -Wall -g -wd981 -wd383   
# -wd981 disables a warning about order of evaluation of operands:
#  see http://software.intel.com/en-us/forums/showthread.php?t=62309
#  and also http://software.intel.com/en-us/articles/cdiag981/
# -wd383 also diasables a warning about passing a temporary object to a function.
#CXXFLAGS += -DMPICH_IGNORE_CXX_SEEK
CXXFLAGS +=  -DINTEL -xSSE4.2
#CXXFLAGS += -fp-stack-check -fstack-security-check
MYLIB = /ichec/work/dsast002b/jm_code/extra_libs
#
# gcc
#INC  = -I$(MYLIB)/cfitsio_gcc/include
#LDFLAGS += -L$(MYLIB)/cfitsio_gcc/lib/ -lcfitsio
#INC += -I$(MYLIB)/silo_gcc_nohdf/include
#LDFLAGS += -L$(MYLIB)/silo_gcc_nohdf/lib/ -lsilo
#LDFLAGS += -lm
#intel
INC  = -I$(MYLIB)/cfitsio/include
LDFLAGS += -L$(MYLIB)/cfitsio/lib/ -lcfitsio
INC += -I$(MYLIB)/silo_intel_nohdf/include
LDFLAGS += -L$(MYLIB)/silo_intel_nohdf/lib/ -lsilo
LDFLAGS += -lmkl_sequential -lmkl_core
endif

#############################################
# Specific Options for ICHEC Blue Gene /L
#############################################
# module load bgl
#############################################
ifeq ($(MAKE_UNAME), bgl)
CXX = mpixlcxx
#CXX=mpicxx

# The following option allows stuff to compile -- MPI complains without it.
CXXFLAGS = -DMPICH_IGNORE_CXX_SEEK 
CXXFLAGS += -O3 -qstrict -qstaticlink
#CXXFLAGS += -O0
#CXXFLAGS += -Wall
#CXXFLAGS += -g   # for debugging with ddt. 

MYLIB = /ichec/home/users/jmackey/jm_code/extra_libs

# Overwrite linking to get rid of readline, which is not on bg/l
LDFLAGS = -lm

INC  = -I$(MYLIB)/cfitsio_bgl_mpixlc/include
LDFLAGS += -L$(MYLIB)/cfitsio_bgl_mpixlc/lib/ -lcfitsio
INC += -I$(MYLIB)/silo_bgl_nohdf_xlc/include
LDFLAGS += -L$(MYLIB)/silo_bgl_nohdf_xlc/lib/ -lsilo
#LDFLAGS += $(MYLIB)/silo_bgl_nohdf_xlc/lib/libsilo.a
LDFLAGS += -lnss_files -lnss_dns -lresolv -lc -lnss_files -lnss_dns -lresolv -lc
endif

##################################################
# Specific Options for Aurora -- DIAS Intel Xeon #
##################################################
ifeq ($(MAKE_UNAME), aurora)
ifeq ($(IOMODE), USE_FILE_COMMS)
CXX=icpc
endif
ifeq ($(IOMODE), USE_MPI)
CXX=mpicxx #mpiCC.mpich
endif
CXXFLAGS = -O3
MYLIB = /home/jmackey/mysims/local_libs/
INC  = -I$(MYLIB)/silo_gcc_nohdf/include
LDFLAGS += -L$(MYLIB)/silo_gcc_nohdf/lib/ -lsilo
LDFLAGS += -lcfitsio -lm
endif

##################################################
##################################################

CXXFLAGS += $(OPTION)
VPATH = ../source




OBJECTS = mainMPI.o uniformGrid.o gridMethods.o global.o \
	VectorOps.o VectorOps_spherical.o \
	integrator.o cooling.o microphysics.o raytracer_SC.o \
	dataio.o readparams.o dataio_silo.o dataio_fits.o \
	dataio_silo_MPI.o gridMethodsMPI.o uniformGridMPI.o \
	raytracer_SC_pllel.o comm_mpi.o comm_files.o utility_fits_class.o \
	eqns_base.o solver_eqn_base.o \
	eqns_hydro_adiabatic.o riemann.o findroot.o Riemann_FVS_hydro.o \
	flux_hydro_adiabatic.o solver_eqn_hydro_adi.o \
	eqns_hydro_isothermal.o flux_hydro_isothermal.o solver_eqn_hydro_iso.o \
	eqns_mhd_adiabatic.o riemannMHD.o flux_mhd_adiabatic.o solver_eqn_mhd_adi.o

gridcode_parallel: $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(INC) $(OBJECTS) -o gridcode_parallel $(LDFLAGS)


# make has rules for making objects from .cc files, so I don't need them
# explicitly, unless I am doing something unusual.
.cc.o:
	$(CXX) $(CXXFLAGS) $(INC) -c $<


mainMPI.o: 	  mainMPI.cc grid.h global.h comms.h
global.o: 	  global.cc global.h

gridMethods.o:  gridMethods.cc grid.h global.h solver_eqn_base.h microphysics.h \
		dataio.h dataio_silo.h dataio_fits.h
gridMethodsMPI.o: gridMethodsMPI.cc grid.h global.h comms.h
uniformGrid.o: 	  uniformGrid.cc uniformGrid.h global.h
uniformGridMPI.o: uniformGridMPI.cc uniformGrid.h global.h comms.h

riemann.o: 	riemann.cc riemann.h findroot.h global.h eqns_hydro_adiabatic.h  eqns_base.h
findroot.o: 	findroot.cc findroot.h global.h
Riemann_FVS_hydro.o: Riemann_FVS_hydro.cc Riemann_FVS_hydro.h global.h eqns_hydro_adiabatic.h eqns_base.h

VectorOps.o: 	VectorOps.cc VectorOps.h global.h uniformGrid.h
VectorOps_spherical.o: VectorOps_spherical.cc VectorOps_spherical.h VectorOps.h \
		       global.h uniformGrid.h

eqns_base.o:	          eqns_base.cc eqns_base.h global.h
solver_eqn_base.o:	  VectorOps.h solver_eqn_base.h eqns_base.h global.h 

eqns_hydro_adiabatic.o:   eqns_hydro_adiabatic.cc  eqns_hydro_adiabatic.h  eqns_base.h global.h
flux_hydro_adiabatic.o:   flux_hydro_adiabatic.cc  flux_hydro_adiabatic.h  eqns_hydro_adiabatic.h  eqns_base.h global.h
solver_eqn_hydro_adi.o:	  VectorOps.h solver_eqn_base.h eqns_base.h global.h \
			  solver_eqn_hydro_adi.h flux_hydro_adiabatic.h  eqns_hydro_adiabatic.h  

eqns_hydro_isothermal.o:  eqns_hydro_isothermal.cc eqns_hydro_isothermal.h eqns_base.h global.h
flux_hydro_isothermal.o:  flux_hydro_isothermal.cc flux_hydro_isothermal.h eqns_hydro_isothermal.h eqns_base.h global.h
solver_eqn_hydro_iso.o:   VectorOps.h solver_eqn_base.h eqns_base.h global.h \
			  solver_eqn_hydro_iso.h flux_hydro_isothermal.h eqns_hydro_isothermal.h 

eqns_mhd_adiabatic.o:   eqns_mhd_adiabatic.cc  eqns_mhd_adiabatic.h  eqns_base.h global.h
riemannMHD.o:   riemannMHD.cc riemannMHD.h global.h eqns_mhd_adiabatic.h eqns_base.h global.h 
flux_mhd_adiabatic.o:   flux_mhd_adiabatic.cc  flux_mhd_adiabatic.h \
			eqns_mhd_adiabatic.h  riemannMHD.h eqns_base.h global.h
solver_eqn_mhd_adi.o:	VectorOps.h solver_eqn_base.h eqns_base.h global.h \
			solver_eqn_mhd_adi.h flux_mhd_adiabatic.h  eqns_mhd_adiabatic.h

integrator.o:	integrator.cc integrator.h global.h
cooling.o:	cooling.cc cooling.h global.h
microphysics.o:	microphysics.cc microphysics.h global.h cooling.h
raytracer_SC.o: raytracer_SC.cc raytracer_SC.h global.h uniformGrid.h
raytracer_SC_pllel.o : raytracer_SC_pllel.cc raytracer_SC.h global.h uniformGrid.h comms.h

dataio.o:       dataio.cc dataio.h global.h solver_eqn_base.h readparams.h
dataio_silo.o:  dataio_silo.cc dataio_silo.h dataio.h global.h solver_eqn_base.h file_status.h
dataio_fits.o:  dataio_fits.cc dataio_fits.h dataio.h global.h solver_eqn_base.h \
		solver_eqn_hydro_adi.h solver_eqn_hydro_iso.h file_status.h

readparams.o:	readparams.cc readparams.h global.h
dataio_silo_MPI.o:    dataio_silo_MPI.cc dataio_silo.h dataio.h global.h comms.h file_status.h
utility_fits_class.o: utility_fits_class.cc dataio_fits.h dataio.h global.h


comm_mpi.o: comm_mpi.cc comm_mpi.h comms.h global.h
comm_files.o: comm_files.cc comm_files.h comms.h global.h

clean:
	rm -f *.o gridcode_parallel

